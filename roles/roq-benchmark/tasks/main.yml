---

- name: combine user configuration with defaults
  set_fact:
    config: >
        {{ roq_benchmark_defaults | combine(roq_benchmark | default({}), recursive=True) }}
  tags:
    - roq-benchmark

- name: configuration (debug)
  debug:
    var: config
    verbosity: 1
  tags:
    - roq-benchmark

- block:

  - name: create required directories
    file:
      path: "{{ root }}/{{ item }}"
      state: directory
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0770
    with_items:
      - "/etc/roq"
      - "/var/lib/roq"
      - "/var/log/roq"
      - "/var/run/roq"

  - name: create benchmark run script
    template:
      src: "templates/roq-benchmark.sh"
      dest: "{{ root }}/usr/local/bin/roq-benchmark.sh"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0750

  - name: create ping run scripts
    template:
      src: "templates/roq-ping.sh"
      dest: "{{ root }}/usr/local/bin/roq-ping-{{ item }}.sh"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0750
    with_sequence: 1-2

  - name: create pong run scripts
    template:
      src: "templates/roq-pong.sh"
      dest: "{{ root }}/usr/local/bin/roq-pong-{{ item }}.sh"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0750
    with_sequence: 1-2

  - name: create ping flags
    template:
      src: "templates/roq-ping.flags"
      dest: "{{ root }}/etc/roq/roq-ping-{{ item }}.flags"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0640
    with_sequence: 1-2

  - name: create pong flags
    template:
      src: "templates/roq-pong.flags"
      dest: "{{ root }}/etc/roq/roq-pong-{{ item }}.flags"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0640
    with_sequence: 1-2

  - name: install the roq-benchmark conda package
    shell: "{{ root }}/miniconda/bin/conda install -y -n base \
      roq-benchmark{{ '' if config.version == 'latest' else '==%s'|format(config.version) }}"
  
  when: "'roq_benchmark' in group_names"
  become: "{{ 'true' if become_user is defined else 'false' }}"
  tags:
    - roq-benchmark

##############
### SERVER ###
##############

- block:

  - name: docker pull images
    docker_image:
      name: "{{ docker_registry_prefix | default('') }}{{ config.docker.name }}"
      tag: "{{ config.version }}"
      source: pull
      force_tag: true
      build:
        http_timeout: 600
    when: config.docker.use

  - name: define list of systemd units
    set_fact:
      systemd_units:
      - 'roq-ping-1.service'
      - 'roq-ping-2.service'
      - 'roq-pong-1.service'
      - 'roq-pong-2.service'

# FIXME(thraneh): templates require {{ item }}
#  - name: create systemd units
#    template:
#      src: "templates/{{ item }}"
#      dest: "/etc/systemd/system/{{ item }}"
#      owner: root
#      group: root
#      mode: 0644
#    with_items: "{{ systemd_units }}"

  - name: create ping systemd units
    template:
      src: "templates/roq-ping.service"
      dest: "{{ root }}/etc/systemd/system/roq-ping-{{ item }}.service"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0750
    with_sequence: 1-2

  - name: create pong systemd units
    template:
      src: "templates/roq-pong.service"
      dest: "{{ root }}/etc/systemd/system/roq-pong-{{ item }}.service"
      owner: "{{ roq_user }}"
      # group: "{{ roq_user }}"
      mode: 0750
    with_sequence: 1-2

  - name: enable systemd units
    systemd:
      name: "{{ item }}"
      enabled: false
      daemon_reload: true
    with_items: "{{ systemd_units }}"

  when: become_user is defined and 'roq_benchmark' in group_names
  become: true
  tags:
    - roq-benchmark
