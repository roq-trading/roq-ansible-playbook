---

- block:

  - name: create directories
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0755
    with_items:
      - "{{ root }}/var/lib/teamcity"
    notify:
    - restart teamcity-server
    - restart teamcity-agent

  - name: create directories
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0750
    with_items:
      - "{{ root }}/var/lib/teamcity/server"
      - "{{ root }}/var/lib/teamcity/backups"
      - "{{ root }}/var/log/teamcity"
    notify:
    - restart teamcity-server

  - name: create directories
    file:
      path: "{{ root }}/var/lib/teamcity/agent-{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0750
    with_sequence: start=1 end={{ teamcity_agent_count | int }}
    notify:
    - restart teamcity-agent

  - name: create directories
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0755
    with_items:
      - "{{ root }}/opt/ansible"
      - "{{ root }}/opt/ansible/docker"
      - "{{ root }}/opt/ansible/docker/roq-tc-agent"
  
# server

  - name: pull docker image
    docker_image:
      name: "{{ docker_registry_prefix | default('') }}{{ teamcity.docker.name }}"
      tag: "{{ teamcity.docker.tag }}"
      source: pull
      force_source: true
    notify:
    - restart teamcity-server

  - name: create systemd service
    template:
      src: "templates/teamcity-server.service"
      dest: "/etc/systemd/system/teamcity-server.service"
      owner: root
      group: root
      mode: 0644
    register: teamcity_server_service
    notify:
    - restart teamcity-server
  
  - name: enable the teamcity-server service
    systemd:
      name: "teamcity-server.service"
      state: restarted
      enabled: true
      daemon_reload: true
    when: teamcity_server_service.changed

  - name: create shell script
    template:
      src: "templates/{{ item }}"
      dest: "{{ root }}/usr/local/bin/{{ item }}"
      owner: "{{ roq_user }}"
      mode: 0755
    with_items:
      - "teamcity-backup"

  - name: define list of systemd services
    set_fact:
      systemd_services:
      - 'teamcity-backup.service'

  - name: define list of systemd timers
    set_fact:
      systemd_timers:
      - 'teamcity-backup.timer'

  - name: define list of systemd units
    set_fact:
      systemd_units:
      - '{{ systemd_services }} + {{ systemd_timers }}'

  - name: create systemd units
    template:
      src: "templates/{{ item }}"
      dest: "/etc/systemd/system/{{ item }}"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ systemd_units }}"

  - name: disable systemd services
    systemd:
      name: "{{ item }}"
      enabled: false
      daemon_reload: true
    with_items: "{{ systemd_services }}"

  - name: enable and start systemd timers
    systemd:
      name: "{{ item }}"
      enabled: true
      state: started
      daemon_reload: true
    with_items: "{{ systemd_timers }}"

# agent

  - name: pull docker image
    docker_image:
      name: "{{ docker_registry_prefix | default('') }}{{ teamcity_agent.docker.name }}"
      tag: "{{ teamcity_agent.docker.tag }}"
      source: pull
      force_source: true
    notify:
    - restart teamcity-agent
  
  - name: create dockerfile
    template:
      src: "templates/Dockerfile"
      dest: "/opt/ansible/docker/roq-tc-agent/Dockerfile"

  - name: build customized agent
    docker_image:
      name: "roq-tc-agent"
      tag: "latest"
      source: build
      force_source: true
      force_tag: true
      build:
        path: "/opt/ansible/docker/roq-tc-agent"
        pull: true
    notify:
    - restart teamcity-agent

  - name: create systemd services
    template:
      src: "templates/teamcity-agent.service"
      dest: "/etc/systemd/system/teamcity-agent-{{ item }}.service"
      owner: root
      group: root
      mode: 0644
    with_sequence: start=1 end={{ teamcity_agent_count | int }}
    notify:
    - restart teamcity-agent
  
  - name: enable the teamcity agent services
    systemd:
      name: "teamcity-agent-{{ item }}.service"
      state: started
      enabled: true
      daemon_reload: true
    with_sequence: start=1 end={{ teamcity_agent_count | int }}
  
  become: "{{ 'true' if become_user is defined else 'false' }}"
  tags:
    - teamcity
