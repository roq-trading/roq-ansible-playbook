#!/usr/bin/env bash

set -e

for i in {1..10}; do
  if [ -d "{{ backups }}" ]; then
    echo "{{ backups }} is ready!"
    break
  fi
  if [ "$i" -eq "10" ]; then
    echo "{{ backups }} is *not* ready!"
    exit 1
  fi
  sleep 2
done

mkdir -p {{ backups }}/teamcity/{raw,native}

TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')

#######################
###  NATIVE BACKUP  ###
#######################

# note! does *NOT* work with HSQLDB2, seeing this: "Cannot access HSQLDB database as it is locked by another process"
if false; then

NATIVE_FILE="$TIMESTAMP.zip"
NATIVE_OUT_DOCKER="/var/lib/teamcity/backups/native/$NATIVE_FILE"
NATIVE_OUT="{{ root }}$NATIVE_OUT_DOCKER"
NATIVE_BACKUP="{{ backups }}/teamcity/native/"

echo "Create $SNAPSHOT..."
mkdir -p "$(dirname $NATIVE_OUT)"
docker exec teamcity-server.service \
  bash -c "cd /opt/teamcity/bin; TEAMCITY_APP_DIR=../webapps/teamcity /opt/teamcity/bin/maintainDB.sh backup --include-config --include-database --include-build-logs --include-personal-changes --include-supplementary-data --backup-file $NATIVE_OUT_DOCKER"

echo "Copy to $NATIVE_BACKUP..."
cp "$NATIVE_OUT" "$NATIVE_BACKUP"

echo "Clean-up"
rm "$NATIVE_OUT"

echo "Success"

fi

####################
###  RAW BACKUP  ###
####################

# note! this is a last-resort backup
# there are no guarantees that files are captured consistently


RAW_IN="{{ (root + '/var/lib/teamcity/server') | roq_realpath }}"
RAW_FILE="$TIMESTAMP.tar.bz2"
RAW_OUT="{{ (root + '/var/lib/teamcity/backups/raw') | roq_realpath }}/$RAW_FILE"
RAW_BACKUP="{{ backups }}/teamcity/raw/"

echo "Create $RAW_OUT..."
mkdir -p "$(dirname $RAW_OUT)"
tar -cjf "$RAW_OUT" -C "$RAW_IN" .

echo "Copy to $RAW_BACKUP..."
cp "$RAW_OUT" "$RAW_BACKUP"

echo "Clean-up"
rm "$RAW_OUT"

echo "Success"

##############
###  DONE  ###
##############

echo "Done!"
