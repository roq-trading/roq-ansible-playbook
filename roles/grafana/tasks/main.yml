---

- block:

  - name: create directories
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - "{{ root }}/var/lib/grafana"
      - "{{ root }}/var/lib/grafana/dashboards"
      - "{{ root }}/etc/grafana"
      - "{{ root }}/etc/grafana/provisioning"
      - "{{ root }}/etc/grafana/provisioning/datasources"
      - "{{ root }}/etc/grafana/provisioning/dashboards"
    notify:
    - restart grafana

  - name: provision datasources
    template:
      src: "templates/datasources.yml"
      dest: "/etc/grafana/provisioning/datasources/all.yml"
      owner: root
      group: root
      mode: 0644
    notify:
    - restart grafana
  
  - name: provision dashboards
    template:
      src: "templates/{{ item }}"
      dest: "/var/lib/grafana/dashboards/{{ item }}"
      owner: root
      group: root
      mode: 0644
    with_items:
      - "femas-gateway.json"
    when: "'roq-femas' in group_names"
    notify:
    - restart grafana
  
  - name: provision dashboards
    template:
      src: "templates/dashboards.yml"
      dest: "/etc/grafana/provisioning/dashboards/all.yml"
      owner: root
      group: root
      mode: 0644
    notify:
    - restart grafana

  - name: create encrypted password
    shell: "echo -n `echo -n {{ grafana.postgres.password }}{{ grafana.postgres.user }} | md5sum | awk '{print $1}'`"
    register: encrypted_password

  - name: create postgres user
    postgresql_user:
      name: "{{ grafana.postgres.user }}"
      password: "md5{{ encrypted_password.stdout_lines[0] }}"
      encrypted: true
      role_attr_flags: "CREATEDB,NOSUPERUSER"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart grafana

  - name: create postgres database
    postgresql_db:
      name: "{{ grafana.postgres.database }}"
      encoding: "UTF-8"
      owner: "{{ grafana.postgres.user }}"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart grafana

  - name: grant postgres user priviliges
    postgresql_privs:
      db: "{{ grafana.postgres.database }}"
      privs: "ALL"
      objs: "ALL_IN_SCHEMA"
      role: "{{ grafana.postgres.user }}"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart grafana
  
  - name: pull docker image
    docker_image:
      name: "{{ grafana.docker.name }}"
      tag: "{{ grafana.docker.tag }}"
      force: true
      http_timeout: 300
    notify:
    - restart grafana
  
  - name: create systemd service
    template:
      src: "templates/grafana.service"
      dest: "/etc/systemd/system/grafana.service"
      owner: root
      group: root
      mode: 0644
    register: grafana_service
    notify:
    - restart grafana
  
  - name: enable the grafana service
    systemd:
      name: "grafana.service"
      state: restarted
      enabled: true
      daemon_reload: true
    when: grafana_service.changed

  - name: create scripts
    template:
      src: "templates/{{ item }}"
      dest: "{{ root }}/usr/local/bin/{{ item }}"
      owner: "{{ user }}"
      mode: 0750
    with_items:
      - "grafana-backup.sh"

  - name: define list of systemd services
    set_fact:
      systemd_services:
      - 'grafana-backup.service'

  - name: define list of systemd timers
    set_fact:
      systemd_timers:
      - 'grafana-backup.timer'

  - name: define list of systemd units
    set_fact:
      systemd_units:
      - '{{ systemd_services }} + {{ systemd_timers }}'

  - name: create systemd units
    template:
      src: "templates/{{ item }}"
      dest: "/etc/systemd/system/{{ item }}"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ systemd_units }}"

  - name: enable systemd units
    systemd:
      name: "{{ item }}"
      enabled: true
      daemon_reload: true
    with_items: "{{ systemd_units }}"

  - name: start systemd timers
    systemd:
      name: "{{ item }}"
      state: started
    with_items: "{{ systemd_timers }}"
  
  become: "{{ 'true' if become_user is defined else 'false' }}"
  tags:
    - grafana
