---

- name: detect owner
  set_fact:
    user: "{{ user if roq_user is defined else ansible_user_id }}"
  tags:
    - gogs

- block:

  - name: create directories
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "{{ root }}/var/lib/gogs"
    - "{{ root }}/var/lib/gogs/custom"
    - "{{ root }}/var/lib/gogs/custom/conf"
    notify:
    - restart gogs

# TODO(thraneh): this doesn't seem to work as advertised... only on first install?
  - name: create app.ini
    template:
      src: "templates/app.ini"
      dest: "{{ root }}/var/lib/gogs/custom/conf/app.ini"
      owner: root
      mode: 0644
    notify:
    - restart gogs

  - name: create encrypted password
    shell: "echo -n `echo -n {{ gogs.postgres.password }}{{ gogs.postgres.user }} | md5sum | awk '{print $1}'`"
    register: encrypted_password

  - name: create postgres user
    postgresql_user:
      name: "{{ gogs.postgres.user }}"
      password: "md5{{ encrypted_password.stdout_lines[0] }}"
      encrypted: true
      role_attr_flags: "CREATEDB,NOSUPERUSER"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart gogs

  - name: create postgres database
    postgresql_db:
      name: "{{ gogs.postgres.database }}"
      encoding: "UTF-8"
      owner: "{{ gogs.postgres.user }}"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart gogs

  - name: grant postgres user priviliges
    postgresql_privs:
      db: "{{ gogs.postgres.database }}"
      privs: "ALL"
      objs: "ALL_IN_SCHEMA"
      role: "{{ gogs.postgres.user }}"
      login_host: "localhost"
      port: "{{ postgres.port }}"
      login_user: "{{ postgres.user }}"
      login_password: "{{ postgres.password }}"
    notify:
    - restart gogs

  - name: pull docker image
    docker_image:
      name: "{{ docker_registry_prefix | default('') }}{{ gogs.docker.name }}"
      tag: "{{ gogs.docker.tag }}"
      source: pull
      force_tag: true
      build:
        http_timeout: 300
    notify:
    - restart gogs

  - name: create systemd service
    template:
      src: "templates/gogs.service"
      dest: "/etc/systemd/system/gogs.service"
      owner: root
      group: root
      mode: 0644
    register: gogs_service

  - name: enable the gogs service
    systemd:
      name: "gogs.service"
      state: restarted
      enabled: true
      daemon_reload: true
    when: gogs_service.changed

  - name: create scripts
    template:
      src: "templates/{{ item }}"
      dest: "{{ root }}/usr/local/bin/{{ item }}"
      owner: "{{ user }}"
      mode: 0750
    with_items:
      - "gogs-backup.sh"

  - name: define list of systemd services
    set_fact:
      systemd_services:
      - 'gogs-backup.service'

  - name: define list of systemd timers
    set_fact:
      systemd_timers:
      - 'gogs-backup.timer'

  - name: define list of systemd units
    set_fact:
      systemd_units:
      - '{{ systemd_services }} + {{ systemd_timers }}'

  - name: create systemd units
    template:
      src: "templates/{{ item }}"
      dest: "/etc/systemd/system/{{ item }}"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ systemd_units }}"

  - name: enable systemd units
    systemd:
      name: "{{ item }}"
      enabled: true
      daemon_reload: true
    with_items: "{{ systemd_units }}"

  - name: start systemd timers
    systemd:
      name: "{{ item }}"
      state: started
    with_items: "{{ systemd_timers }}"

  become: "{{ 'true' if become_user is defined else 'false' }}"
  tags:
    - gogs
